(()=>{"use strict";function t(l,e="",o=!0){null!=l&&(null!==l.right&&t(l.right,`${e}${o?"│   ":"    "}`,!1),console.log(`${e}${o?"└── ":"┌── "}${l.data}`),null!==l.left&&t(l.left,`${e}${o?"    ":"│   "}`,!0))}class l{constructor(t){this.data=t,this.right=null,this.left=null}}function e(t,o,n){if(o>n)return null;let r=Math.floor((o+n)/2),h=new l(t[r]);return h.left=e(t,o,r-1),h.right=e(t,r+1,n),h}function o(t){return t&&t.data?Math.max(1+o(t.right),1+o(t.left)):0}function n(t,l){return l&&l.data?l.data==t.data?0:t.data>l.data?1+n(t,l=l.right):1+n(t,l=l.left):0}function r(t){if(null==t||null==t.data)return!0;let l=o(t.left),e=o(t.right);return Math.abs(l-e)<=1&&r(t.left)&&r(t.right)}let h=[];function i(t){if(console.log("arr = "+h),null==t||null==t.data||null==t)return console.log("returned arr = "+h),h;h.push(t.data),null!=t.left&&null!=t.left&&i(t.left),null!=t.right&&null!=t.right&&i(t.right)}let a=[4,5,3,4,1,23,1,4,7,8,7];console.log(a),a=function(t){t.sort((function(t,l){return t-l}));let l=t.length,e=[];e.push(t[0]);for(let o=1;o<l;o++)t[o]!=t[o-1]&&e.push(t[o]);return e}(a),console.log(a);let s=new class{constructor(t){console.log("before"),this.root=e(t,0,t.length-1),console.log("after")}insert(t,e=this.root){return null==e||e.data==t?(console.log(e),e=new l(t)):(parseInt(t)>parseInt(e.data)?e.right=this.insert(t,e.right):e.left=this.insert(t,e.left),e)}delete(t,l=this.root){if(null==l)return l;if(l.data>t)return l.left=this.delete(t,l.left),l;if(l.data<t)return l.right=this.delete(t,l.right),l;if(null==l.left&&null!=l.right)return l.right;if(null==l.right&&null!=l.left)return l.left;if(null!=l.right&&null!=l.left){const t=this.findSuccessor(l.right);return l.data=t.data,l.right=this.delete(t.data,l.right),l}}find(t){let l=this.root;for(;null!=l&&l.data!=t;)l=t>l.data?l.right:l.left;return l}graph(){console.log(this.root),t(this.root)}findSuccessor(t){let l=t;for(;null!=l.left;)l=l.left;return l}levelOrder(t=this.root){if(null==t||null==t.data)return null;let l=[];for(l.push(t);0!==l.length;){let t=l[0];console.log(t.data),null!=t.left&&l.push(t.left),null!=t.right&&l.push(t.right),l.shift()}return null}}(a);s.graph(),s.insert(77),s.insert(11),s.graph(),s.delete(1),s.graph(),s.delete(8),s.graph(),s.delete(11),s.graph(),console.log(s.find(77)),s.levelOrder(s.node),console.log("===================================="),function t(l){if(null==l||null==l.data)return null;t(l.left),console.log(l.data),t(l.right)}(s.root),console.log("===================================="),function t(l){null!=l&&null!=l.data&&(console.log(l.data),t(l.left),t(l.right))}(s.root),console.log("===================================="),function t(l){l&&l.data&&(t(l.left),t(l.right),console.log(l.data))}(s.root),console.log("The Height of the tree = "+o(s.root)),console.log("The height of node 23 = "+o(s.find(23))),console.log("The height of node 4 = "+o(s.find(4))),console.log("The height of node 8 = "+s.find(8)),s.graph(),console.log("The Depth of the node 77 = "+n(s.find(77),s.root)),console.log("The Depth of the node 4 = "+n(s.find(4),s.root)),console.log("The Depth of the node 3 = "+n(s.find(3),s.root)),console.log("The Depth of the node 5 = "+n(s.find(5),s.root)),s.insert(100),s.graph(),console.log(r(s.root)),1==r(s.root)?console.log("The tree is balanced :)"):console.log("The tree is not balanced :("),s.insert(200),s.graph(),console.log(r(s.root)),1==r(s.root)?console.log("The tree is balanced :)"):console.log("The tree is not balanced :("),s.root=function(t){h.length=0;let l=i(t);return console.log(h),console.log(l),e(h,0,h.length-1)}(s.root),s.graph()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,