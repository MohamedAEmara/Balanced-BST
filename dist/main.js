(()=>{"use strict";function t(e,l="",o=!0){null!=e&&(null!==e.right&&t(e.right,`${l}${o?"│   ":"    "}`,!1),console.log(`${l}${o?"└── ":"┌── "}${e.data}`),null!==e.left&&t(e.left,`${l}${o?"    ":"│   "}`,!0))}class e{constructor(t){this.data=t,this.right=null,this.left=null}}function l(t,o,n){if(o>n)return null;let r=Math.floor((o+n)/2),h=new e(t[r]);return h.left=l(t,o,r-1),h.right=l(t,r+1,n),h}function o(t){return t&&t.data?Math.max(1+o(t.right),1+o(t.left)):0}function n(t,e){return e&&e.data?e.data==t.data?0:t.data>e.data?1+n(t,e=e.right):1+n(t,e=e.left):0}function r(t){let e=o(t.left),l=o(t.right);return console.log("height 1 "+e),console.log("height 2 "+l),console.log("diff = "+Math.abs(e-l)),Math.abs(e-l)<=1}let h=[4,5,3,4,1,23,1,4,7,8,7];console.log(h),h=function(t){t.sort((function(t,e){return t-e}));let e=t.length,l=[];l.push(t[0]);for(let o=1;o<e;o++)t[o]!=t[o-1]&&l.push(t[o]);return l}(h),console.log(h);let i=new class{constructor(t){console.log("before"),this.root=l(t,0,t.length-1),console.log("after")}insert(t,l=this.root){return null==l||l.data==t?(console.log(l),l=new e(t)):(parseInt(t)>parseInt(l.data)?l.right=this.insert(t,l.right):l.left=this.insert(t,l.left),l)}delete(t,e=this.root){if(null==e)return e;if(e.data>t)return e.left=this.delete(t,e.left),e;if(e.data<t)return e.right=this.delete(t,e.right),e;if(null==e.left&&null!=e.right)return e.right;if(null==e.right&&null!=e.left)return e.left;if(null!=e.right&&null!=e.left){const t=this.findSuccessor(e.right);return e.data=t.data,e.right=this.delete(t.data,e.right),e}}find(t){let e=this.root;for(;null!=e&&e.data!=t;)e=t>e.data?e.right:e.left;return e}graph(){console.log(this.root),t(this.root)}findSuccessor(t){let e=t;for(;null!=e.left;)e=e.left;return e}levelOrder(t=this.root){if(null==t||null==t.data)return null;let e=[];for(e.push(t);0!==e.length;){let t=e[0];console.log(t.data),null!=t.left&&e.push(t.left),null!=t.right&&e.push(t.right),e.shift()}return null}}(h);i.graph(),i.insert(77),i.insert(11),i.graph(),i.delete(1),i.graph(),i.delete(8),i.graph(),i.delete(11),i.graph(),console.log(i.find(77)),i.levelOrder(i.node),console.log("===================================="),function t(e){if(null==e||null==e.data)return null;t(e.left),console.log(e.data),t(e.right)}(i.root),console.log("===================================="),function t(e){null!=e&&null!=e.data&&(console.log(e.data),t(e.left),t(e.right))}(i.root),console.log("===================================="),function t(e){e&&e.data&&(t(e.left),t(e.right),console.log(e.data))}(i.root),console.log("The Height of the tree = "+o(i.root)),console.log("The height of node 23 = "+o(i.find(23))),console.log("The height of node 4 = "+o(i.find(4))),console.log("The height of node 8 = "+i.find(8)),i.graph(),console.log("The Depth of the node 77 = "+n(i.find(77),i.root)),console.log("The Depth of the node 4 = "+n(i.find(4),i.root)),console.log("The Depth of the node 3 = "+n(i.find(3),i.root)),console.log("The Depth of the node 5 = "+n(i.find(5),i.root)),i.insert(100),i.graph(),console.log(r(i.root)),1==r(i.root)?console.log("The tree is balanced :)"):console.log("The tree is not balanced :(")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,